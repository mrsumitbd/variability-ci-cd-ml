digraph tree {
    ".travis.yml";
    "sudo";
    "required";
    "dist";
    "xenial";
    "language";
    "cpp";
    "os";
    "linux";
    "compiler";
    "gcc";
    "conan-linux";
    "os";
    "linux";
    "dist";
    "xenial";
    "language";
    "python";
    "python";
    "3.7";
    "services";
    "docker";
    "before_install";
    "True";
    "install";
    "./conan/travis/install.sh";
    "script";
    "./conan/travis/build.sh";
    "conan-osx";
    "os";
    "osx";
    "language";
    "generic";
    "before_install";
    "True";
    "install";
    "./conan/travis/install.sh";
    "script";
    "./conan/travis/build.sh";
    "matrix";
    "include";
    "bare_linux";
    "None";
    "env";
    "ROS_DISTRO=\"none\"";
    "fast_finish";
    "False";
    "before_install";
    "sudo apt-get update && sudo apt-get --reinstall install -qq build-essential";
    "if [ \"$ROS_DISTRO\" = \"none\" ]; then sudo apt-get --reinstall install -qq libzmq3-dev libdw-dev; fi";
    "sudo apt-get --reinstall install -qq libgtest-dev cmake";
    "cd /usr/src/gtest";
    "sudo cmake CMakeLists.txt";
    "sudo make";
    "sudo cp *.a /usr/lib";
    "cd $TRAVIS_BUILD_DIR";
    "install";
    "if [ \"$ROS_DISTRO\" != \"none\" ]; then git clone https://github.com/ros-industrial/industrial_ci.git .ci_config; fi";
    "before_script";
    "mkdir -p build";
    "script";
    "if [ \"$ROS_DISTRO\"  = \"none\" ]; then (cd build; cmake .. ; sudo cmake --build . --target install; ./bin/behaviortree_cpp_v3_test); fi";
    "if [ \"$ROS_DISTRO\" != \"none\" ]; then (.ci_config/travis.sh); fi";
    ".travis.yml" -> "sudo";
    ".travis.yml" -> "dist";
    ".travis.yml" -> "language";
    ".travis.yml" -> "os";
    ".travis.yml" -> "compiler";
    ".travis.yml" -> "conan-linux";
    ".travis.yml" -> "conan-osx";
    ".travis.yml" -> "matrix";
    ".travis.yml" -> "before_install";
    ".travis.yml" -> "install";
    ".travis.yml" -> "before_script";
    ".travis.yml" -> "script";
    "sudo" -> "required";
    "dist" -> "xenial";
    "language" -> "cpp";
    "os" -> "linux";
    "compiler" -> "gcc";
    "conan-linux" -> "os";
    "conan-linux" -> "dist";
    "conan-linux" -> "language";
    "conan-linux" -> "python";
    "conan-linux" -> "services";
    "conan-linux" -> "before_install";
    "conan-linux" -> "install";
    "conan-linux" -> "script";
    "os" -> "linux";
    "dist" -> "xenial";
    "language" -> "python";
    "python" -> "3.7";
    "services" -> "docker";
    "before_install" -> "True";
    "install" -> "./conan/travis/install.sh";
    "script" -> "./conan/travis/build.sh";
    "conan-osx" -> "os";
    "conan-osx" -> "language";
    "conan-osx" -> "before_install";
    "conan-osx" -> "install";
    "conan-osx" -> "script";
    "os" -> "osx";
    "language" -> "generic";
    "before_install" -> "True";
    "install" -> "./conan/travis/install.sh";
    "script" -> "./conan/travis/build.sh";
    "matrix" -> "include";
    "matrix" -> "fast_finish";
    "include" -> "bare_linux";
    "include" -> "env";
    "bare_linux" -> "None";
    "env" -> "ROS_DISTRO=\"none\"";
    "fast_finish" -> "False";
    "before_install" -> "sudo apt-get update && sudo apt-get --reinstall install -qq build-essential";
    "before_install" -> "if [ \"$ROS_DISTRO\" = \"none\" ]; then sudo apt-get --reinstall install -qq libzmq3-dev libdw-dev; fi";
    "before_install" -> "sudo apt-get --reinstall install -qq libgtest-dev cmake";
    "before_install" -> "cd /usr/src/gtest";
    "before_install" -> "sudo cmake CMakeLists.txt";
    "before_install" -> "sudo make";
    "before_install" -> "sudo cp *.a /usr/lib";
    "before_install" -> "cd $TRAVIS_BUILD_DIR";
    "install" -> "if [ \"$ROS_DISTRO\" != \"none\" ]; then git clone https://github.com/ros-industrial/industrial_ci.git .ci_config; fi";
    "before_script" -> "mkdir -p build";
    "script" -> "if [ \"$ROS_DISTRO\"  = \"none\" ]; then (cd build; cmake .. ; sudo cmake --build . --target install; ./bin/behaviortree_cpp_v3_test); fi";
    "script" -> "if [ \"$ROS_DISTRO\" != \"none\" ]; then (.ci_config/travis.sh); fi";
}

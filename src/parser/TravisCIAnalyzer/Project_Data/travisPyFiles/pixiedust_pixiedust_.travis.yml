language: python
dist: trusty
python:
- '2.7'
- '3.5'
before_install:
- echo Installing Anaconda. Path is $PATH
- cd
- if [[ "$TRAVIS_PYTHON_VERSION" == "2.7" ]]; then wget https://repo.continuum.io/archive/Anaconda2-4.2.0-Linux-x86_64.sh
  -O anaconda.sh; else wget https://repo.continuum.io/archive/Anaconda3-4.2.0-Linux-x86_64.sh
  -O anaconda.sh; fi
- bash anaconda.sh -b -p $HOME/anaconda
- export PATH="$HOME/anaconda/bin:$PATH"
- echo Done installing Anaconda. Path is $PATH
- echo Install scala
- wget http://www.scala-lang.org/files/archive/scala-2.10.4.tgz
- tar -xvf scala-2.10.4.tgz
- export SCALA_HOME=~/scala-2.10.4
- echo Installing Spark
- if [[ "$TRAVIS_PYTHON_VERSION" == "2.7" ]]; then wget http://d3kbcqa49mib13.cloudfront.net/spark-1.6.0-bin-hadoop2.6.tgz
  -O spark-hadoop.tgz; else wget http://d3kbcqa49mib13.cloudfront.net/spark-2.2.0-bin-hadoop2.7.tgz
  -O spark-hadoop.tgz; fi
- tar -xvf spark-hadoop.tgz
- if [[ "$TRAVIS_PYTHON_VERSION" == "2.7" ]]; then export SPARK_HOME=~/spark-1.6.0-bin-hadoop2.6; else export SPARK_HOME=~/spark-2.2.0-bin-hadoop2.7; fi
- export PIXIEDUST_HOME=~/pixiedust-test-$TRAVIS_PYTHON_VERSION
install:
- conda create -y -q -n pixiedust-travis-test python=$TRAVIS_PYTHON_VERSION
- source activate pixiedust-travis-test
- pip install jupyter 
- pip install matplotlib 
- pip install pandas 
- pip install seaborn 
- pip install bokeh 
- pip install requests 
- pip install pyyaml 
- pip install nose
- pip install pandas_datareader
- cd $TRAVIS_BUILD_DIR
- python setup.py install
script:
- echo Starting Test with pyspark kernel
- python $TRAVIS_BUILD_DIR/tests/runPixiedustNotebooks.py -t spark
- echo Starting Test with plain Python kernel
- python $TRAVIS_BUILD_DIR/tests/runPixiedustNotebooks.py -t plain
sudo: false
notifications:
  slack:
    secure: ZGBIE0S/C0pQ4Vmm4KfIyroRX2hU0SCx7BNwcpDc2LoigeWjS6Bs46b0NKuL+ydSeQgoB5esl2WwM08cm0wTVmLd+U07oMMVmqfR6hizCuTbP64j3DNVoE2B5DPxZ/0BSrEWmcEU48Z1CK5Bp3upuq2BcL5JC2x4JQ3F5TOS+UoB7tJ0wNOb/wleWNV/4aEmcrotAkoQLj4RPzyseYpBo3Ix0qXVAtwTHaQE8rKJw+FrwigzR8wd2Vxj7jBuADNPKh9m5r1JFFZGEBPXTlKq8HIlVLWSVdmqzVzJd3p2uFuSs0+snmWb67ZifEnkcmtkFCMcLL02wowmnPnnRU6Dvc5Y9t3xKCHXony0fJXYXlOo6Aq/tWYsxHHyN8RtsQVaioj7gYWiqtAyor2cuGi71FhQ55LydjScUEXUNottEnj/hPvDKa9qEAQU/CVcNw37Um8V/xm2WoPsFkh+9cf6IyRSf9T5wIPjfLROIZ3y91p4y4g4oQ8FpvEvhXD9buuPNkRAu91TvdCiMFIPFOYv7sIiDFIDJzih3+MGNJWwyMquOfmsKrwB/rhCWEExtURxl98P2okjFW74l5zQ7nBnOgSLQwPe3h8PC100ukl3BaWWAPTH93kRsqXLzpbSMd8t6BzOLw7nZ+QT9HImx2teFFGkVIVwZuTuEyscyNvd1qU=
